#include "settings.hpp"

/////////////////////
/// Mission Header///
/////////////////////

class Header
{
  gameType = GAMETYPE;
  minPlayers = MINPLAYERS;
  maxPlayers = MAXPLAYERS;
};

//add the user IDs of players you trust with debug console.
enableDebugConsole[] = {};
enableTargetDebug = 1;


//Allows you to recompile functions in the function library without having to restart.
allowFunctionsRecompile = 1; //You should only change this to 1 for a testing environment.

//////////////
/// Author ///
//////////////

author = AUTHOR;

///////////////////////////////
/// Pictures and description///
///////////////////////////////
onLoadMission = LOADSCREENDESCRIPTON;
overViewText = OVERVIEWDESCRIPTION;
overviewPicture = OVERVIEWPICTURE;
onLoadName = MISSIONTITLE;
loadScreen = LOADSCREENIMAGE;
briefingName = BRIEFINGNAME;

////////////////////////
/// Mission Settings ///
////////////////////////
briefing = SHOWBRIEFING
aiKills = 0;
debriefing = 1;
skipLobby = SKIPLOBBY;

///////////////
/// Respawn ///
///////////////
respawn = RESPAWNTYPE;
respawnDelay = RESPAWNTIME;
respawnDialog = RESPAWNPROMPT;
respawnTemplates[] = RESPAWNTEMPLATES
respawnOnStart = RESPAWNONSTART;



/////////////////////////////////
/// Playable unit manipulation///
/////////////////////////////////

disabledAI = DISABLEAI;			//Stop AI from taking player slots

//////////////////////
/// Revive options ///
//////////////////////


/////////////
/// Tasks ///
/////////////

taskManagement_drawDist = 500;			// Any tasks within this distance will appear, even if unassigned.
taskManagement_propagate = 1;			// Squad leader controls the assigned task of himself and his subordinates.

///////////////////////
/// GARBAGE MANAGER ///
///////////////////////

corpseManagerMode = CORPSEMANAGERMODE;
corpseLimit = CORPSELIMIT;
corpseRemovalMinTime = CORPSEREMOVALMINTIME;
corpseRemovalMaxTime = CORPSEREMOVALMAXTIME;
wreckManagerMode = WRECKMANAGERMODE;
wreckLimit = WRECKLIMIT;
wreckRemovalMinTime = WRECKREMOVALMINTIME;
wreckRemovalMaxTime = WRECKREMOVALMAXTIME;
minPlayerDistance = MINPLAYERDISTANCE;

//Class useful for creating template task names. Leave empty if you don't know what it does.
class CfgTaskDescriptions
{
};

//////////////
/// Dialog ///
//////////////

#include "FOS_Framework\dialogs\defines.hpp"
#include "FOS_Framework\dialogs\dialogs.hpp"


/////////////////
/// Functions ///
/////////////////

class CfgFunctions
{
	#include "FOS_Framework\cfgFunctions.hpp"
};

///Parameters
class Params
{
    class difficulty
	{
		title = "Difficulty";
		values[] = {0,1,2};
		texts[] = {"Easy","Normal","Hard"};
		default = 1;
	};
};
///Endings
class CfgDebriefing
{
    class END1NAME
    {
        win = END1WIN;
		title = END1TITLE;
		subtitle = END1SUBTITLE;
		description = END1DESCRIPTION;
		pictureBackground = "";
		picture = "";
		pictureColor[] = {1,0,0,1};
        missionSwitch = END1MISSIONSWITCH;
    };
    class END2NAME
    {
        win = END2WIN;
		title = END2TITLE;
		subtitle = END2SUBTITLE;
		description = END2DESCRIPTION;
		pictureBackground = "";
		picture = "";
		pictureColor[] = {1,0,0,1};
        missionSwitch = END2MISSIONSWITCH;
    };
    class END3NAME
    {
        win = END3WIN;
		title = END3TITLE;
		subtitle = END3SUBTITLE;
		description = END3DESCRIPTION;
		pictureBackground = "";
		picture = "";
		pictureColor[] = {1,0,0,1};
        missionSwitch = END3MISSIONSWITCH;
    };
    class END4NAME
    {
        win = END4WIN;
        title = END4TITLE;
        subtitle = END4SUBTITLE;
        description = END4DESCRIPTION;
        pictureBackground = "";
        picture = "";
        pictureColor[] = {0.6,0.6,0.0,1};
        missionSwitch = END4MISSIONSWITCH;
    };
    class END5NAME
    {
        win = END5WIN;
        title = END5TITLE;
        subtitle = END5SUBTITLE;
        description = END5DESCRIPTION;
        pictureBackground = "";
        picture = "";
        pictureColor[] = {0.6,0.6,0.0,1};
        missionSwitch = END5MISSIONSWITCH;
    };
};

class CfgNotifications {
	class FOS_Safestart  {
		color[] = {1,1,1,0.8};
		colorIconPicture[] = {1,1,1,0.8};
		colorIconText[] = {"(profilenamespace getvariable ['IGUI_TEXT_RGB_R',0])","(profilenamespace getvariable ['IGUI_TEXT_RGB_G',1])","(profilenamespace getvariable ['IGUI_TEXT_RGB_B',1])","(profilenamespace getvariable ['IGUI_TEXT_RGB_A',0.8])"};
		description = "Safe Start ends in %1:%2";
		iconPicture = "\A3\UI_F\data\IGUI\Cfg\Actions\settimer_ca.paa";
		priority = 7;
		duration = 5;
		title = "Safe Start"
		sound = "defaultNotification";
		soundClose = "defaultNotificationClose";
		soundRadio = "";
	};
	class FOS_SafestartBegin : FOS_Safestart {
		description = "Safe Start begins";
	};
	class FOS_SafestartTimer : FOS_Safestart {
	};
	class FOS_SafestartEnd : FOS_Safestart {
		description = "Safe Start ends"
	}
};

class CfgRespawnTemplates
{
	// Class used in respawnTemplates entry
	class checkpointSystem
	{
		onPlayerKilled = "FOS_fnc_checkpointSystemOnKilled";
		onPlayerRespawn = "FOS_fnc_checkpointSystemOnRespawn";
		respawnDelay = RESPAWNTIME;
		respawnOnStart = RESPAWNONSTART;
		isCall = 1;
	};
	class SpectatorFilter
	{
        onPlayerKilled = "FOS_fnc_spectatorOnKilled";
        onPlayerRespawn = "FOS_fnc_spectatorOnRespawn";
        isCall = 0;
	};
};

class Extended_InitPost_EventHandlers {
    class Man {
        serverInit = "_this call FOS_fnc_customLoadout";
    };
};
